// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id                  String      @id @default(uuid())
  name                String
  userId              String
  checkoutUrl         String?
  billboards          Billboard[] @relation("StoreToBillboard")
  homepageBillboardId String?     @unique
  homepageBillboard   Billboard?  @relation("StoreToHomepageBillboard", fields: [homepageBillboardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categories          Category[]  @relation("StoreToCategory")
  sizes               Size[]      @relation("StoreToSize")
  colors              Color[]     @relation("StoreToColor")
  products            Product[]   @relation("StoreToProduct")
  orders              Order[]     @relation("StoreToOrder")
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([homepageBillboardId])
}

model Billboard {
  id               String     @id @default(uuid())
  storeId          String
  store            Store      @relation("StoreToBillboard", fields: [storeId], references: [id], onDelete: Cascade)
  homepageForStore Store?     @relation("StoreToHomepageBillboard")
  label            String
  imageUrl         String
  categories       Category[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String     @id @default(uuid())
  storeId     String
  store       Store      @relation("StoreToCategory", fields: [storeId], references: [id], onDelete: Cascade)
  billboardId String?
  billboard   Billboard? @relation(fields: [billboardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Product     Product[]  @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description Bytes
  price       Decimal
  stock       Int         @default(0)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  size        Size        @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color       @relation(fields: [colorId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id            String      @id @default(uuid())
  storeId       String
  store         Store       @relation("StoreToOrder", fields: [storeId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  isPaid        Boolean     @default(false)
  // total              Decimal
  // discount           Decimal
  // shipping           Decimal
  // GST                Decimal
  totalAmount   Decimal
  // coupon             String      @default("")
  // userId             String      @default("")
  name          String      @default("")
  phone         String      @default("")
  email         String      @default("")
  address       String      @default("")
  city          String      @default("")
  state         String      @default("")
  postalCode    String      @default("")
  country       String      @default("")
  // comments           Bytes
  // isUserCommentRead  Boolean     @default(false)
  // isAdminCommentRead Boolean     @default(false)
  status        OrderStatus @default(Created)
  transactionId String      @default("")
  // trackingId         String      @default("")
  // internalComments   Bytes
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  // price     Decimal

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  Created
  Processing
  Shipped
  Delivered
  Cancelled
}
